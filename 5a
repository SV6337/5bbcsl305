#include <stdio.h>
#include <math.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

#define MAX_SIZE 20

double compute(char symbol, double op1, double op2) {
    switch (symbol) {
        case '+': return op1 + op2;
        case '-': return op1 - op2;
        case '*': return op1 * op2;
        case '/':
            if (op2 == 0) {
                printf("Error: Division by zero.\n");
                exit(1);
            }
            return op1 / op2;
        case '$':
        case '^': return pow(op1, op2);
        default:
            printf("Error: Invalid operator '%c'.\n", symbol);
            exit(1);
    }
}

int main() {
    double stack[MAX_SIZE], res, op1, op2;
    int top = -1;
    char postfix[MAX_SIZE], *token;

    printf("\nEnter the postfix expression (space-separated):\n");
    fgets(postfix, sizeof(postfix), stdin);

    // Tokenize the input
    token = strtok(postfix, " \n");
    while (token != NULL) {
        if (isdigit(token[0]) || (token[0] == '-' && isdigit(token[1]))) {
            // Push number onto stack
            stack[++top] = atof(token);
        } else if (strlen(token) == 1) {
            // Perform operation for single-character operator
            char symbol = token[0];
            if (top < 1) {
                printf("Error: Insufficient operands for operator '%c'.\n", symbol);
                return 1;
            }
            op2 = stack[top--];
            op1 = stack[top--];
            res = compute(symbol, op1, op2);
            stack[++top] = res;
        } else {
            printf("Error: Invalid token '%s'.\n", token);
            return 1;
        }
        token = strtok(NULL, " \n");
    }

    if (top == 0) {
        printf("\nThe result is: %f\n", stack[top]);
    } else {
        printf("Error: Invalid postfix expression.\n");
    }

    return 0;
}
